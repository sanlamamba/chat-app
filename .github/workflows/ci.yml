name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  server:
    name: Server Tests & Linting
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./server

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: ./server/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Run tests
        run: npm run test
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/test-chat
          REDIS_URL: redis://localhost:6379

      - name: Run test coverage
        run: npm run test:coverage
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/test-chat
          REDIS_URL: redis://localhost:6379

      - name: Upload coverage to Codecov
        if: matrix.node-version == '20.x'
        uses: codecov/codecov-action@v3
        with:
          file: ./server/coverage/lcov.info
          flags: server
          name: server-coverage

  # Lint Client
  client:
    name: Client Linting & Basic Tests
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ./client

    strategy:
      matrix:
        node-version: [18.x, 20.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"
          cache-dependency-path: ./client/package-lock.json

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Verify client builds/runs
        run: |
          timeout 10s npm start --help || true
          echo "Client verification completed"

  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [server, client]
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.base_ref == 'main')

    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"
          cache: "npm"
          cache-dependency-path: |
            ./server/package-lock.json
            ./client/package-lock.json

      - name: Install server dependencies
        run: npm ci
        working-directory: ./server

      - name: Install client dependencies
        run: npm ci
        working-directory: ./client

      - name: Start server in background
        run: |
          npm start &
          sleep 10
          echo "Server started"
        working-directory: ./server
        env:
          NODE_ENV: test
          MONGODB_URI: mongodb://localhost:27017/integration-test
          REDIS_URL: redis://localhost:6379
          PORT: 3001

      - name: Run integration tests
        run: |
          # Add any integration test scripts here
          echo "Integration tests would run here"
          # Example: npm run test:integration
        working-directory: ./server

  quality:
    name: Code Quality
    runs-on: ubuntu-latest
    needs: [server, client]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Install server dependencies
        run: npm ci
        working-directory: ./server

      - name: Install client dependencies
        run: npm ci
        working-directory: ./client

      - name: Run security audit (server)
        run: npm audit --audit-level=high
        working-directory: ./server
        continue-on-error: true

      - name: Run security audit (client)
        run: npm audit --audit-level=high
        working-directory: ./client
        continue-on-error: true

      - name: Check for outdated packages (server)
        run: npm outdated
        working-directory: ./server
        continue-on-error: true

      - name: Check for outdated packages (client)
        run: npm outdated
        working-directory: ./client
        continue-on-error: true

  build:
    name: Build Check
    runs-on: ubuntu-latest
    needs: [server, client]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20.x"

      - name: Install server dependencies
        run: npm ci
        working-directory: ./server

      - name: Install client dependencies
        run: npm ci
        working-directory: ./client

      - name: Check server syntax
        run: node -c src/index.js
        working-directory: ./server

      - name: Check client syntax
        run: node -c src/index.js
        working-directory: ./client

      - name: Create deployment artifact
        if: github.ref == 'refs/heads/main'
        run: |
          mkdir -p deployment
          cp -r server deployment/
          cp -r client deployment/
          tar -czf chat-app-${{ github.sha }}.tar.gz deployment/

      - name: Upload deployment artifact
        if: github.ref == 'refs/heads/main'
        uses: actions/upload-artifact@v4
        with:
          name: chat-app-deployment
          path: chat-app-${{ github.sha }}.tar.gz
          retention-days: 30
